import annotation.qual.ImmediateValue;

package java.time;
class LocalTime
{
    public static @ImmediateValue LocalTime of(int a, int b, int c, int d);
    public static @ImmediateValue LocalTime from(TemporalAccessor temporal);
}
class OffsetTime
{
    public static @ImmediateValue OffsetTime of(LocalTime time, ZoneOffset offset);
    public static @ImmediateValue OffsetTime from(TemporalAccessor temporal);
}
class LocalDateTime
{
    public static @ImmediateValue LocalDateTime of(LocalDate date, LocalTime time);
    public static @ImmediateValue LocalDateTime from(TemporalAccessor temporal);
}
class ZonedDateTime
{
    public static @ImmediateValue ZonedDateTime of(LocalDate date, LocalTime time, ZoneId zone);
    public static @ImmediateValue ZonedDateTime of(LocalDateTime dateTime, ZoneId zone);
    public @ImmediateValue ZonedDateTime withFixedOffsetZone();
    public static @ImmediateValue ZonedDateTime from(TemporalAccessor temporal);
}
class LocalDate
{
    public static @ImmediateValue LocalDate of(int year, Month month, int dayOfMonth);
    public static @ImmediateValue LocalDate of(int year, int month, int dayOfMonth);
    public static @ImmediateValue LocalDate from(TemporalAccessor temporal);
}
class YearMonth
{
    public static @ImmediateValue YearMonth of(int year, int month);
    public static @ImmediateValue YearMonth from(TemporalAccessor temporal);
}
class ZoneId
{
    public static @ImmediateValue ZoneId of(String zone);
}
class ZoneOffset
{
    public static @ImmediateValue ZoneOffset ofHoursMinutes(int hours, int minutes);
}
package java.time.format;
class DateTimeFormatter
{
    public <T> @ImmediateValue T parse(CharSequence text, TemporalQuery<T> query);
}
package com.google.common.primitives;
class Booleans
{
    public List<@ImmediateValue Boolean> asList(boolean[] values);
}
class Ints
{
    public List<@ImmediateValue Integer> asList(int[] values);
}
class Doubles
{
    public List<@ImmediateValue Double> asList(double[] values);
}