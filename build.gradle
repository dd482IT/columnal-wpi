plugins {
  id 'org.checkerframework' version '0.6.15' apply false
  id 'org.openjfx.javafxplugin' version '0.0.10' apply false
}

// We configure this here because it determines JavaFX modules and stubs:
def projectsToJavaFX = [
  app: ['javafx.base', 'javafx.controls', 'javafx.graphics', 'javafx.web'],
  data: ['javafx.base', 'javafx.graphics'],
  expressions: ['javafx.graphics'],
  'gui-utility': ['javafx.base', 'javafx.controls', 'javafx.graphics'],
  'lex-editor': ['javafx.base', 'javafx.controls', 'javafx.graphics', 'javafx.web'],
  stf: ['javafx.base', 'javafx.controls', 'javafx.graphics'],
  transformations:  ['javafx.base', 'javafx.controls', 'javafx.graphics'],
  utility:  ['javafx.base', 'javafx.graphics']
]

subprojects { subproject ->
  if (!subproject.name.startsWith("ann") && !subproject.name.equals("threadchecker") && !subproject.name.equals("tests") && !subproject.name.equals("xml")) {
    apply plugin: 'java-library'
    apply plugin: 'org.checkerframework'
    apply plugin: 'org.openjfx.javafxplugin'

    def stubs = ["JavaGeneral", "Values"]
    stubs += projectsToJavaFX.getOrDefault(subproject.name, [])
    
    checkerFramework {
      checkers = [
              'org.checkerframework.checker.nullness.NullnessChecker'
      ] + ("all".equals(project.findProperty("checkers")) ? [         
              'org.checkerframework.checker.optional.OptionalChecker',
              'org.checkerframework.checker.units.UnitsChecker',
              'org.checkerframework.checker.i18n.I18nChecker',
              'annotation.ValueTypeChecker',
              'annotation.userindex.UserIndexChecker',
              'annotation.help.HelpFileChecker',
              'annotation.funcdoc.FuncDocChecker',
              'annotation.recorded.RecordedChecker'
      ] : [])
      extraJavacArgs = [
          //'-AskipDefs=records.grammar.|one.util.',
          "-Astubs=" + stubs.collect{s -> return "$rootDir" + File.separator + "stubs" + File.separator + s + ".astub"}.findAll {s -> return new File(s).exists()}.join(File.pathSeparator),
          '-AsuppressWarnings=optional.parameter,optional.as.element.type,optional.collection'
      ] + ("all".equals(project.findProperty("checkers")) ? [
          '-Aunits=annotation.units.AbsColIndex,annotation.units.AbsRowIndex,annotation.units.GridAreaColIndex,annotation.units.GridAreaRowIndex,annotation.units.TableDataRowIndex,annotation.units.TableDataColIndex,annotation.units.RowOrColIndex,annotation.units.CanonicalLocation,annotation.units.DisplayLocation,annotation.units.RawInputLocation,annotation.units.DisplayPixels,annotation.units.VirtualPixels',
          "-Apropfiles=$rootDir/app/src/main/resources/transformations_en.properties:$rootDir/app/src/main/resources/expression_en.properties:$rootDir/app/src/main/resources/function_en.properties:$rootDir/app/src/main/resources/newcolumn_en.properties:$rootDir/app/src/main/resources/dataentry_en.properties:$rootDir/app/src/main/resources/main_en.properties:$rootDir/app/src/main/resources/import_en.properties",
          "-Ahelpfiles=$rootDir/xml/src/main/help/agg-recipe.xml;$rootDir/xml/src/main/help/edit-settings.xml;$rootDir/xml/src/main/help/guess-format.xml;$rootDir/xml/src/main/help/edit-check.xml;$rootDir/xml/src/main/help/edit-column.xml;$rootDir/xml/src/main/help/edit-join.xml;$rootDir/xml/src/main/help/edit-r.xml;$rootDir/xml/src/main/help/edit-unit.xml;$rootDir/xml/src/main/help/split-by.xml",
          "-Afuncdocfiles=$rootDir/xml/src/main/funcdoc/boolean.xml;$rootDir/xml/src/main/funcdoc/comparison.xml;$rootDir/xml/src/main/funcdoc/conversion.xml;$rootDir/xml/src/main/funcdoc/core.xml;$rootDir/xml/src/main/funcdoc/datetime.xml;$rootDir/xml/src/main/funcdoc/list.xml;$rootDir/xml/src/main/funcdoc/listprocess.xml;$rootDir/xml/src/main/funcdoc/literals.xml;$rootDir/xml/src/main/funcdoc/lookup.xml;$rootDir/xml/src/main/funcdoc/math.xml;$rootDir/xml/src/main/funcdoc/number.xml;$rootDir/xml/src/main/funcdoc/operators.xml;$rootDir/xml/src/main/funcdoc/optional.xml;$rootDir/xml/src/main/funcdoc/text.xml",
      ] : []) + ("true".equals(project.findProperty("threadCheck")) ? ['-Xplugin:threadchecker.plugin.TCPlugin'] : [])
    }
    javafx {
      version = "13.0.2"
      // We need at least javafx.base and javafx.graphics everywhere because the threadchecker uses it:
      // TODO fix this!
      modules = projectsToJavaFX.getOrDefault(subproject.name, ['javafx.base', 'javafx.graphics'])
    }

    dependencies {
      checkerFramework libs.checkerframework
      implementation libs.checkerframework.qual
      
      annotationProcessor project(':anns')
      compileOnly project(':anns')
      annotationProcessor project(':anns-threadchecker')
      compileOnly project(':anns-threadchecker')
      annotationProcessor project(':threadchecker')
      compileOnly project(':threadchecker')
    }
    build.dependsOn ':xml:build'

    sourceCompatibility = 11
    targetCompatibility = 11
  }

  repositories {
    mavenCentral()
    maven {
      url "https://artifactory.nimblygames.com/artifactory/ng-public-release/"
    }
  }
  tasks.withType(JavaCompile) {
    options.compilerArgs += ["-Xlint:unchecked", "-Xlint:deprecation", "-Xlint:module", "-Werror", "-parameters"]
    options.encoding = 'UTF-8'
    options.release = 11
  }

}
