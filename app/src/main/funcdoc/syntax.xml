<?xml version="1.0" encoding="UTF-8" ?>
<functionDocumentation xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                       xsi:noNamespaceSchemaLocation="funcdoc.xsd"
                       namespace="" toc="Syntax">
    <syntax title="If Then Else" id="if">
        <typeArg>t</typeArg>
        <syntaxElements>
            <keyword>@if</keyword>
            <type name="condition">Boolean</type>
            <keyword>@then</keyword>
            <type name="value if true">t</type>
            <keyword>@else</keyword>
            <type name="value if false">t</type>
            <keyword>@endif</keyword>
        </syntaxElements>
        <description>
            <p>Chooses between two expressions depending on whether the condition is true or false.  For example, <code>@if score &gt;= 0 @then "Positive" @else "Negative" @endif</code> would check whether the score expression is greater than or equal to zero.  If it was, the result would be the "Positive" text; otherwise it would be the "Negative" text.</p>
        </description>
        <example>
            <input>@if 5 &gt;= 0 @then "Positive" @else "Negative" @endif</input>
            <output>"Positive"</output>
        </example>
        <example>
            <input>@if "A" = "B" @then 1 @else 0 @endif</input>
            <output>0</output>
        </example>
    </syntax>
    <syntax title="Match" id="match">
        <typeArg>c</typeArg>
        <typeArg>t</typeArg>
        <syntaxElements>
            <keyword>@match</keyword>
            <type name="expression">c</type>
            <keyword>@case</keyword>
            <type name="pattern">c</type>
            <keyword>@given</keyword>
            <type name="guard">Boolean</type>
            <keyword>@orcase</keyword>
            <type name="another pattern">c</type>
            <keyword>@given</keyword>
            <type name="another guard">Boolean</type>
            <keyword>@then</keyword>
            <type name="value if matches">t</type>
            <keyword>@endmatch</keyword>
        </syntaxElements>
        <description>
            <p>Matches against several possible alternatives.  For example, <code>@match desc @case "full" @orcase "max" @then 1.0 @case _ @then 0.5 @endmatch</code> checks if desc is equal to "full" or "max".  If so, the result is 1.0, otherwise (the case underscore matches anything else) the result is 0.5.</p>
        </description>
        <example>
            <input>@match "B" @case "A" @then true @case "B" @then false @endmatch</input>
            <output>false</output>
        </example>
        <example>
            <input>@match "Hello There" @case "Bye" @then "Leaving" @case "Hello" ; _ @then "Arriving" @endmatch</input>
            <output>"Arriving"</output>
        </example>
        <example>
            <input>@match 32 @case 0 @then "Zero" @case n @given n &gt; 0 @then "Positive" @endmatch</input>
            <output>"Positive"</output>
        </example>
    </syntax>
    <syntax id="define" title="Define">
        <syntaxElements>
            <keyword>@define</keyword>
            <type name="definition">_</type>
            <keyword>@then</keyword>
            <type name="expression">t</type>
            <keyword>@enddefine</keyword>
        </syntaxElements>
        <description>
            <p>Defines a name for a value, to allow later use.  Often you may find yourself repeating the same piece of code, which is both tiresome to enter, and awkward when you need to edit it in multiple places later.  By defining a name for the shared code, it's easier to reference and edit.</p>
            
            <p>Another use for definitions is to do pattern matching, especially for things like optional types; for example <code>@define Is(x) = Column with optional type @then x @enddefine</code></p>
        </description>
        <example>
            <input>@define feet mm = @call function\\convert unit(unit{mm},1{foot}) @then (6 * feet mm) * (4 * feet mm) @enddefine</input>
            <output>2229672.96{mm^2}</output>
        </example>
        <example>
            <input>@define sq = @function(x) @then x*x @endfunction, x = @call sq(256) @then x - 1 @enddefine</input>
            <output>65535</output>
        </example>
        <example>
            <input>@define distance :: type{Number{m}}, distance = @call function\\from text("23") @then distance * 2 @enddefine</input>
            <output>46{m}</output>
        </example>
    </syntax>
    <syntax id="function" title="Function">
        <syntaxElements>
            <keyword>@function</keyword>
            <type name="parameters">a</type>
            <keyword>@then</keyword>
            <type name="body">b</type>
            <keyword>@endfunction</keyword>
        </syntaxElements>
        <description>
            <p>Makes a function.  The comma-separated list of parameters goes after the function\\keyword, and the body of the function goes after the @then.  Functions are very often used with @define, which allows you to name and re-use the function.</p>
            
            <p>If the function you need is very simple and uses its parameter once, you may find the <link syntax="quest"/> syntax useful.</p>
        </description>
        <example>
            <input>@define low = @function(a, b) @then @if a &lt; b @then a @else b @endif @endfunction @then @call low(3, -5) @enddefine</input>
            <output>-5</output>
        </example>
        <example>
            <input>@call function\\apply each([2,3,4], @function(x) @then x * x @endfunction)</input>
            <output>[4,9,16]</output>
        </example>
    </syntax>
    <syntax id="quest" title="Implicit Function">
        <syntaxElements>
            <keyword>?</keyword>
        </syntaxElements>
        <description>
            <p>Sometimes you want a function that does something very simple, like adding one to a number.  The full <link syntax="function"/> syntax is cumbersome for this.  Instead you can write <code>(? + 1)</code>, which is a function with a single parameter that adds one to get the result.  If you have multiple question marks, e.g. <code>? * ?</code>, the function has as many parameters as there are question marks.</p>
            <p>The function extends to the single expression that the question mark(s) appear in.  So <code>0 &lt;= ? &lt; ? &lt;= 1</code> takes two parameters and checks that the first is less than the second, and they are both between zero and one.  The expression <code>(? + 1) * 2</code> is a type error because you can't multiply a function like two (use the full function syntax instead).</p>
        </description>
        <example>
            <input>@call function\\apply each([3,7,-4], (? + 1))</input>
            <output>[4,8,-3]</output>
        </example>
        <example>
            <input>@call function\\combine([2, 4, 3], (? * ?))</input>
            <output>24</output>
        </example>
    </syntax>
    <variable name="group count">
        <type>Number</type>
        <description>
            <p>A count of the number of items that collapsed into the destination row.  The aggregate expression can either be calculated once for the whole source table (in which case this variable is the length of the source table) or split by row values.</p>
            <p>For example, if you split by a boolean column Winning, there will be one aggregated row for all the rows in the source table where Winning was true -- and there, group count will be the number of rows in the source table where Winning was true.</p>
            <p>If you want a frequency table, using group count by itself will produce the right result.</p>
        </description>
    </variable>
    <variable name="row">
        <type>Number</type>
        <description>
            <p>The number of the current row.  The first row is 1, the second row is 2 and so on.</p>
        </description>
    </variable>
</functionDocumentation>
