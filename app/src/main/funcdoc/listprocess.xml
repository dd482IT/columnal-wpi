<?xml version="1.0"?>
<!--
  ~ Columnal: Safer, smoother data table processing.
  ~ Copyright (c) Neil Brown, 2016-2020, 2022.
  ~
  ~ This file is part of Columnal.
  ~
  ~ Columnal is free software: you can redistribute it and/or modify it under
  ~ the terms of the GNU General Public License as published by the Free
  ~ Software Foundation, either version 3 of the License, or (at your option)
  ~ any later version.
  ~
  ~ Columnal is distributed in the hope that it will be useful, but WITHOUT 
  ~ ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or 
  ~ FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for 
  ~ more details.
  ~
  ~ You should have received a copy of the GNU General Public License along 
  ~ with Columnal. If not, see <https://www.gnu.org/licenses/>.
  -->

<functionDocumentation xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                       xsi:noNamespaceSchemaLocation="funcdoc.xsd"
                       namespace="listprocess">
    <function name="any">
        <typeArg>t</typeArg>
        <argType name="list">[@typevar t]</argType>
        <argType name="test">(@typevar t) -&gt; Boolean</argType>
        <returnType name="any pass test">Boolean</returnType>
        <description>
            <p>Returns true if the given function returns true for any item in the list.</p>
            <p>If the list is empty, returns false.</p>
        </description>
        <example>
            <inputArg>(["a", "b", "c"], (? = "b"))</inputArg>
            <output>true</output>
        </example>
        <example>
            <inputArg>([0, 1, 2, 3], (? &gt; 5))</inputArg>
            <output>false</output>
        </example>
        <example>
            <inputArg>([], (? = 0))</inputArg>
            <output>false</output>
        </example>
    </function>
    <function name="all">
        <typeArg>t</typeArg>
        <argType name="list">[@typevar t]</argType>
        <argType name="test">(@typevar t) -&gt; Boolean</argType>
        <returnType name="all pass test">Boolean</returnType>
        <description>
            <p>Returns true if the given function returns true for all items in the list.</p>
            <p>If the list is empty, returns true.</p>
        </description>
        <example>
            <inputArg>([0, 1, 2, 3], (? &lt; 5))</inputArg>
            <output>true</output>
        </example>
        <example>
            <inputArg>(["a", "b", "c"], (? = "b"))</inputArg>
            <output>false</output>
        </example>
        <example>
            <inputArg>([], (? = 0))</inputArg>
            <output>true</output>
        </example>
    </function>
    <function name="none">
        <typeArg>t</typeArg>
        <argType name="list">[@typevar t]</argType>
        <argType name="test">(@typevar t) -&gt; Boolean</argType>
        <returnType name="none pass test">Boolean</returnType>
        <description>
            <p>Returns true if the given function returns true for no items in the list.</p>
            <p>If the list is empty, returns true.</p>
        </description>
        <example>
            <inputArg>([0, 1, 2, 3], (? &gt; 5))</inputArg>
            <output>true</output>
        </example>
        <example>
            <inputArg>(["a", "b", "c"], (? = "b"))</inputArg>
            <output>false</output>
        </example>
        <example>
            <inputArg>([], (? = 0))</inputArg>
            <output>true</output>
        </example>
    </function>
    
    <function name="combine">
        <synonym>fold</synonym>
        <synonym>reduce</synonym>
        
        <typeArg>t</typeArg>
        <argType name="items">[@typevar t]</argType>
        <argType name="combining function">(@typevar t, @typevar t) -&gt; @typevar t</argType>
        <returnType name="combined">@typevar t</returnType>
        <description>
            <p>Collapses the list into a single item by combining the elements using the given function.</p>
        </description>
        <example>
            <inputArg>([1, 2, 3], (? + ?))</inputArg>
            <output>6</output>
        </example>
        <example>
            <inputArg>(["a", "b", "c"], (? ; ?))</inputArg>
            <output>"abc"</output>
        </example>
        <example>
            <inputArg>([true, false, false, true], (? | ?))</inputArg>
            <output>true</output>
        </example>

        <example>
            <inputArg>([], (? + ?))</inputArg>
            <output>error</output>
        </example>
    </function>
    
    <function name="select">
        <synonym>filter</synonym>
        
        <typeArg>t</typeArg>
        <argType name="list">[@typevar t]</argType>
        <argType name="test">(@typevar t) -&gt; Boolean</argType>
        <returnType name="items passing test">[@typevar t]</returnType>
        <description>
            <p>Returns a new list containing all the items in the list for which the function returns true.</p>
        </description>
        <equivalence display="false">
            <foranytype name="t"/>
            <forany name="xs">[@typevar t]</forany>
            <forany name="f">((@typevar t) -&gt; Boolean)</forany>
            <lhs>@call function\\all(@call function\\select(xs, f), f)</lhs>
            <rhs>true</rhs>
        </equivalence>
        <example>
            <inputArg>([3, 8, 4, 6, 2], (? &gt;= 5))</inputArg>
            <output>[8, 6]</output>
        </example>
        <example>
            <inputArg>([], (? = 0))</inputArg>
            <output>[]</output>
        </example>
    </function>
    
    <function name="apply each">
        <synonym>map</synonym>
        <synonym>lapply</synonym>
        <synonym>sapply</synonym>
        <synonym>mutate</synonym>
        
        <typeArg>before</typeArg>
        <typeArg>after</typeArg>
        <argType name="list">[@typevar before]</argType>
        <argType name="transform function">(@typevar before) -&gt; @typevar after</argType>
        <returnType name="transformed list">[@typevar after]</returnType>
        <description>
            <p>Applies the function to each item in the list, and returns the resulting items.</p>
            <p>The order of the items in the new list will correspond to the original order.</p>
        </description>
        <example>
            <inputArg>([3, 6, 9], (? + 1))</inputArg>
            <output>[4, 7, 10]</output>
        </example>
        <example>
            <inputArg>([-3, 4, -7], function\\abs)</inputArg>
            <output>[3, 4, 7]</output>
        </example>
    </function>
    
    <function name="count where">
        <synonym>countif</synonym>
        <typeArg>t</typeArg>
        <argType name="list">[@typevar t]</argType>
        <argType name="test">(@typevar t) -&gt; Boolean</argType>
        <returnType name="count">Number</returnType>
        <description>
            <p>Counts the number of items in the list where the given test function returns true.</p>
        </description>
        <equivalence display="false">
            <foranytype name="t"/>
            <forany name="xs">[@typevar t]</forany>
            <forany name="f">((@typevar t) -&gt; Boolean)</forany>
            <lhs>@call function\\list length(@call function\\select(xs, f))</lhs>
            <rhs>@call function\\count where(xs, f)</rhs>
        </equivalence>
        <example>
            <inputArg>([11, -2, 14, 4, 0], (? &gt; 10))</inputArg>
            <output>2</output>
        </example>
        <example>
            <inputArg>(["Hi", "Hello"], (? = "Bye"))</inputArg>
            <output>0</output>
        </example>
    </function>
    <function name="list contains">
        <typeArg>t</typeArg>
        <typeConstraint>Equatable t</typeConstraint>
        <argType name="list">[@typevar t]</argType>
        <argType name="item">@typevar t</argType>
        <returnType name="is in list">Boolean</returnType>
        <description>
            <p>Checks if the item is in the list.</p>
        </description>
        <example>
            <inputArg>([1, 2, 3], 2)</inputArg>
            <output>true</output>
        </example>
        <example>
            <inputArg>(["a", "b", "c"], "d")</inputArg>
            <output>false</output>
        </example>
    </function>
</functionDocumentation>
