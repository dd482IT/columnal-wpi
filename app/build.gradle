plugins {
    id 'application'
    id 'io.miret.etienne.sass' version '1.4.1'
}
apply plugin: 'java'


dependencies {
    implementation project(':utility')
    implementation project(':gui-utility')
    implementation project(':parsers')
    implementation project(':data')
    implementation project(':stf')
    implementation project(':expressions')
    implementation project(':functions')
    implementation project(':lex-editor')
    implementation project(':transformations')
    implementation project(':r-interop')
    implementation libs.guava
    implementation libs.wellbehavedfx
    //implementation 'com.google.code.findbugs:jsr305:3.0.2'
    implementation libs.controlsfx
    implementation libs.poi.ooxml
    implementation libs.jsoup
    implementation libs.commons.io
    implementation libs.commons.lang3
    implementation libs.javaSMT
    implementation libs.jna
    implementation libs.jna.platform
    implementation libs.packr
}

task copySCSS(type: Copy) {
    from "${projectDir}/src/main/scss"
    from "${projectDir}/src/main/scss/light"
    include "*.scss"
    into "${buildDir}/generated/sources/scss/light"
}

compileSass {
    dependsOn copySCSS
    outputDir = project.file("${buildDir}/resources/main")
    sourceDir = project.file("${buildDir}/generated/sources/scss/light")
    noErrorCss()
}

build.dependsOn(compileSass)
jar.dependsOn(compileSass)
run.dependsOn(compileSass)

task validateXmlHelp(type: XmlValidate) {
    xml fileTree(dir: "${projectDir}/src/main/help", include: '*.xml')
    xsd = file("${projectDir}/src/main/help/help.xsd")
}

task validateXmlFuncdoc(type: XmlValidate) {
    xml fileTree(dir: "${projectDir}/src/main/funcdoc", include: '*.xml')
    xsd = file("${projectDir}/src/main/funcdoc/funcdoc.xsd")
}

// This should probably be check really, but I don't want to wait for the CI:
build.dependsOn(validateXmlFuncdoc)
build.dependsOn(validateXmlHelp)

task xsltHelp(type: SaxonXsltTask) {
    stylesheet "${projectDir}/src/main/xslt/make-help-html.xsl"
    input fileTree(dir: "${projectDir}/src/main/help", include: '*.xml')
    outputFileExtension 'html'
    output "${buildDir}/resources/main"
}

task xsltHelpIndiv(type: SaxonXsltTask) {
    stylesheet "${projectDir}/src/main/xslt/make-help-indiv.xsl"
    input fileTree(dir: "${projectDir}/src/main/help", include: '*.xml')
    parameters (
        myOutputDir: "${buildDir}/resources/main"
    )
}

task xsltFuncdocIndivHtml(type: SaxonXsltTask) {
    stylesheet "${projectDir}/src/main/xslt/funcdoc-indiv-html.xsl"
    input fileTree(dir: "${projectDir}/src/main/funcdoc", include: '_all.xml')
    parameters (
        myOutputDir: "${buildDir}/resources/main"
    )
}

task xsltFuncdocJoinedHtml(type: SaxonXsltTask) {
    stylesheet "${projectDir}/src/main/xslt/funcdoc-joined-html.xsl"
    input fileTree(dir: "${projectDir}/src/main/funcdoc", include: '*.xml')
    outputFileExtension 'html'
    output "${buildDir}/resources/main"
}

task xsltFuncdocTypesAndMini(type: SaxonXsltTask) {
    stylesheet "${projectDir}/src/main/xslt/funcdoc-types-and-mini.xsl"
    input file("${projectDir}/src/main/funcdoc/_all.xml")
    parameters (
        myOutputDir: "${buildDir}/resources/main"
    )
}

task xsltExtractTests(type: SaxonXsltTask) {
    stylesheet "${projectDir}/src/main/xslt/extract-tests.xsl"
    input fileTree(dir: "${projectDir}/src/main/funcdoc", include: '*.xml')
    outputFileExtension 'test'
    output "${buildDir}/resources/main"
}

build.dependsOn(xsltHelp, xsltHelpIndiv, xsltFuncdocIndivHtml, xsltFuncdocJoinedHtml, xsltFuncdocTypesAndMini, xsltExtractTests)
jar.dependsOn(xsltHelp, xsltHelpIndiv, xsltFuncdocIndivHtml, xsltFuncdocJoinedHtml, xsltFuncdocTypesAndMini, xsltExtractTests)

// Parallel execution of XSLT tasks causes a Saxon exception, although I believe it may be
// an underlying problem to do with this: https://issuetracker.google.com/issues/137929327?pli=1
// found via https://github.com/bazelbuild/bazel/issues/12768 and leads to https://bugs.openjdk.org/browse/JDK-8205976
// At a guess this can be solved with sequential execution, hence this:
xsltHelpIndiv.mustRunAfter(xsltHelp)
xsltFuncdocIndivHtml.mustRunAfter(xsltHelpIndiv)
xsltFuncdocJoinedHtml.mustRunAfter(xsltFuncdocIndivHtml)
xsltFuncdocTypesAndMini.mustRunAfter(xsltFuncdocJoinedHtml)
xsltExtractTests.mustRunAfter(xsltFuncdocTypesAndMini)

ext {
    javaMainClass = "xyz.columnal.gui.Main"
}
application {
    mainClassName = javaMainClass
}
description = 'app'
