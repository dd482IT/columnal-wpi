import org.checkerframework.checker.nullness.qual.Nullable;
import org.checkerframework.checker.initialization.qual.UnknownInitialization;
import org.checkerframework.checker.interning.qual.Interned;
import org.checkerframework.dataflow.qual.Pure;

package javafx.scene;
class Parent
{
    // Can *request* layout even if children are uninitialized:
    void requestLayout() @UnknownInitialization;
    ObservableList<Node> getChildren() @UnknownInitialization;
}

class Node
{
    void setCursor(@Nullable Cursor c) @UnknownInitialization;
    Cursor getCursor() @UnknownInitialization;
    void setClip(@Nullable Node a);
    void setEffect(@Nullable Effect e) @UnknownInitialization;
    ObservableList<String> getStyleClass() @UnknownInitialization;
    @Pure @Nullable Scene getScene() @UnknownInitialization;

    void setOnMousePressed(EventHandler<? super MouseEvent> value) @UnknownInitialization;
    void setOnMouseReleased(EventHandler<? super MouseEvent> value) @UnknownInitialization;
    void setOnMouseClicked(EventHandler<? super MouseEvent> value) @UnknownInitialization;
    void setOnMouseMoved(EventHandler<? super MouseEvent> value) @UnknownInitialization;
    void setOnMouseDragged(EventHandler<? super MouseEvent> value) @UnknownInitialization;

    void setScaleX(double x) @UnknownInitialization;

    double getWidth() @UnknownInitialization;
    double getHeight() @UnknownInitialization;

    BooleanProperty focusedProperty() @UnknownInitialization;
}
class Scene
{
    @Pure @Nullable Window getWindow();
}

package javafx.scene.control;
class Dialog<T>
{
    void setResizable(boolean b) @UnknownInitialization;
    void initModality(Modality m) @UnknownInitialization;
    void initOwner(Window w) @UnknownInitialization;
    DialogPane getDialogPane() @UnknownInitialization;
    void setResultConverter(Callback<ButtonType, @Nullable T> a) @UnknownInitialization;
    void setOnShown(EventHandler<DialogEvent> e) @UnknownInitialization;
    void setTitle(String s) @UnknownInitialization;
}
class Button
{
    void setOnAction(@NonNull EventHandler<ActionEvent> ev) @UnknownInitialization;
}
class ToggleButton
{
    ToggleButton(@Localized String text);
    ToggleButton(@Localized String text, Node graphic);
    void setGraphic(Node graphic) @UnknownInitialization;
    BooleanProperty selectedProperty() @UnknownInitialization;
}
@Interned class ButtonType
{

}
class ComboBox<T>
{
    ObjectProperty<@Nullable T> valueProperty();
}
class TableView
{
    //@UnderInitialization(TableView.class) List getItems();
}
class TableCell
{
     void setGraphic(@Nullable Node a);
}
class ListCell
{
     StringProperty textProperty() @UnknownInitialization;
}
class PopupControl
{
    void setSkin(Skin<?> value) @UnknownInitialization;
}
class Menu
{
    Menu(@NonNull String text, @Nullable Node graphic, @NonNull MenuItem... menuItems);
}
class MenuItem
{
    void setDisable(boolean b) @UnknownInitialization;
    void setOnMenuValidation(EventHandler e) @UnknownInitialization;
    void addEventHandler(EventType t, EventHandler e) @UnknownInitialization;
    StringProperty textProperty() @UnknownInitialization;
    ReadOnlyObjectProperty parentMenuProperty() @UnknownInitialization;
}

package javafx.scene.effect;
class DropShadow
{
    void setInput(@Nullable Effect e);
}
class InnerShadow
{
    void setInput(@Nullable Effect e);
}

package javafx.scene.layout;
class BorderPane
{
    BorderPane(@Nullable Node a, @Nullable Node b, @Nullable Node c, @Nullable Node d, @Nullable Node e);
    //@Initialized void setTop(@Nullable Node a);
    void setCenter(@Nullable Node a);
}
class Pane
{
    ObservableList<Node> getChildren() @UnknownInitialization;
}
class Region
{
    DoubleProperty minWidthProperty() @UnknownInitialization;
    DoubleProperty prefWidthProperty() @UnknownInitialization;
    DoubleProperty maxWidthProperty() @UnknownInitialization;
    DoubleProperty widthProperty() @UnknownInitialization;

    DoubleProperty minHeightProperty() @UnknownInitialization;
    DoubleProperty prefHeightProperty() @UnknownInitialization;
    DoubleProperty maxHeightProperty() @UnknownInitialization;
    DoubleProperty heightProperty() @UnknownInitialization;
    
    void setMinWidth(double v) @UnknownInitialization;
    void setPrefWidth(double v) @UnknownInitialization;
    void setMaxWidth(double v) @UnknownInitialization;
    
    void setMinHeight(double v) @UnknownInitialization;
    void setPrefHeight(double v) @UnknownInitialization;
    void setMaxHeight(double v) @UnknownInitialization;

    double getWidth() @UnknownInitialization;
    double getHeight() @UnknownInitialization;
}

package javafx.stage;
class Window
{
    boolean isShowing() @UnknownInitialization;
    void hide() @UnknownInitialization;

    <T extends Event> void addEventFilter(
                final EventType<T> eventType,
                final EventHandler<? super T> eventFilter) @UnknownInitialization;
}
class PopupWindow
{
    void show(Node ownerNode, double anchorX, double anchorY) @UnknownInitialization;
    void setAnchorX(final double value) @UnknownInitialization;
    void setAnchorY(final double value) @UnknownInitialization;
    void setHideOnEscape(boolean value) @UnknownInitialization;
    void hide() @UnknownInitialization;
}
class FileChooser
{
    @Nullable File showOpenDialog(@Nullable Window w);
    @Nullable List<@NonNull File> showOpenMultipleDialog(@Nullable Window w);
    @Nullable File showSaveDialog(@Nullable Window w);
}

package org.scenicview;
class ScenicView
{
    // Not actually true (will throw NPE) but we only this for debugging and don't want to do a null check:
    void show(@Nullable Scene target);
}
package org.controlsfx.control;
class SegmentedButton
{
    List getButtons() @UnknownInitialization;
    ToggleGroup getToggleGroup() @UnknownInitialization;
}
class PopOver
{
    void show(@UnknownInitialization @NonNull Node owner);
}
package org.fxmisc.richtext;
class StyleClassedTextArea
{
    String getText() @UnknownInitialization;
    void setText(String s) @UnknownInitialization;
    int getLength() @UnknownInitialization;
}
class GenericStyledArea
{
    void replace(StyledDocument doc) @UnknownInitialization;
}