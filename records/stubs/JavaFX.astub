import org.checkerframework.checker.nullness.qual.Nullable;
import org.checkerframework.checker.initialization.qual.UnknownInitialization;

package javafx.scene;
class Parent
{
    // Can *request* layout even if children are uninitialized:
    void requestLayout() @UnknownInitialization;
    ObservableList<Node> getChildren() @UnknownInitialization;
}

class Node
{
    void setCursor(Cursor c) @UnknownInitialization;
    void setClip(@Nullable Node a);
    ObservableList<String> getStyleClass() @UnknownInitialization;
    @Nullable Scene getScene() @UnknownInitialization;

    void setOnMousePressed(EventHandler<? super MouseEvent> value) @UnknownInitialization;
    void setOnMouseReleased(EventHandler<? super MouseEvent> value) @UnknownInitialization;
    void setOnMouseClicked(EventHandler<? super MouseEvent> value) @UnknownInitialization;

    void setScaleX(double x) @UnknownInitialization;
}
class Scene
{
    @Nullable Window getWindow();
}

package javafx.scene.control;
class Dialog
{
    DialogPane getDialogPane() @UnknownInitialization;
    void setResultConverter(Callback a) @UnknownInitialization;
}
class TableView
{
    //@UnderInitialization(TableView.class) List getItems();
}
class TableCell
{
     void setGraphic(@Nullable Node a);
}
class ListCell
{
     StringProperty textProperty() @UnknownInitialization;
}
class PopupControl
{
    void setSkin(Skin<?> value) @UnknownInitialization;
}

package javafx.scene.layout;
class BorderPane
{
    BorderPane(@Nullable Node a, @Nullable Node b, @Nullable Node c, @Nullable Node d, @Nullable Node e);
    //@Initialized void setTop(@Nullable Node a);
    void setCenter(@Nullable Node a);
}
class Pane
{
    ObservableList<Node> getChildren() @UnknownInitialization;
}
class Region
{
    DoubleProperty prefWidthProperty() @UnknownInitialization;
    DoubleProperty heightProperty() @UnknownInitialization;
}

package javafx.stage;
class Window
{
    boolean isShowing() @UnknownInitialization;
    void hide() @UnknownInitialization;

    <T extends Event> void addEventFilter(
                final EventType<T> eventType,
                final EventHandler<? super T> eventFilter) @UnknownInitialization;
}
class PopupWindow
{
    void show(Node ownerNode, double anchorX, double anchorY) @UnknownInitialization;
    void setAnchorX(final double value) @UnknownInitialization;
    void setAnchorY(final double value) @UnknownInitialization;
    void setHideOnEscape(boolean value) @UnknownInitialization;
    void hide() @UnknownInitialization;
}

package org.scenicview;
class ScenicView
{
    // Not actually true (will throw NPE) but we only this for debugging and don't want to do a null check:
    void show(@Nullable Scene target);
}