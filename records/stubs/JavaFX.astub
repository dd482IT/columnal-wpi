import org.checkerframework.checker.nullness.qual.Nullable;
import org.checkerframework.checker.initialization.qual.UnknownInitialization;
import org.checkerframework.checker.interning.qual.Interned;
import org.checkerframework.dataflow.qual.Pure;

// Pretty much all methods in JavaFX can be treated as UnknownInitialization
// because they only require initialisation of their own class.

package javafx.beans.property;
class SimpleObjectProperty<T>
{
    @Pure T get();
}

package javafx.css;
class Styleable
{
    ObservableList<String> getStyleClass(@UnknownInitialization(javafx.css.Styleable.class) Styleable this);
}

package javafx.geometry;
class Point2D
{
    @Pure double getX();
    @Pure double getY();
}

package javafx.scene;
class Parent
{
    // Can *request* layout even if children are uninitialized:
    void requestLayout(@UnknownInitialization(javafx.scene.Parent.class) Parent this);
    ObservableList<Node> getChildren(@UnknownInitialization(javafx.scene.Parent.class) Parent this);
}

class Node
{
    void setCursor(@UnknownInitialization(javafx.scene.Node.class) Node this, @Nullable Cursor c);
    Cursor getCursor(@UnknownInitialization(javafx.scene.Node.class) Node this);
    void setClip(@UnknownInitialization(javafx.scene.Node.class) Node this, @Nullable Node a);
    void setEffect(@UnknownInitialization(javafx.scene.Node.class) Node this, @Nullable Effect e);
    ObservableList<String> getStyleClass(@UnknownInitialization(javafx.scene.Node.class) Node this);
    @Pure @Nullable Scene getScene(@UnknownInitialization(javafx.scene.Node.class) Node this);

    <T extends Event> void addEventFilter(@UnknownInitialization(javafx.scene.Node.class) Node this, EventType t, EventHandler handler);
    <T extends Event> void addEventHandler(@UnknownInitialization(javafx.scene.Node.class) Node this, EventType t, EventHandler handler);
    void setOnMousePressed(@UnknownInitialization(javafx.scene.Node.class) Node this, EventHandler<? super MouseEvent> value);
    void setOnMouseReleased(@UnknownInitialization(javafx.scene.Node.class) Node this, EventHandler<? super MouseEvent> value);
    void setOnMouseClicked(@UnknownInitialization(javafx.scene.Node.class) Node this, EventHandler<? super MouseEvent> value);
    void setOnMouseMoved(@UnknownInitialization(javafx.scene.Node.class) Node this, EventHandler<? super MouseEvent> value);
    void setOnMouseDragged(@UnknownInitialization(javafx.scene.Node.class) Node this, EventHandler<? super MouseEvent> value);
    void setOnMouseEntered(@UnknownInitialization(javafx.scene.Node.class) Node this, EventHandler<? super MouseEvent> value);
    void setOnMouseExited(@UnknownInitialization(javafx.scene.Node.class) Node this, EventHandler<? super MouseEvent> value);
    
    void setMouseTransparent(@UnknownInitialization(javafx.scene.Node.class) Node this, boolean b);

    void setScaleX(@UnknownInitialization(javafx.scene.Node.class) Node this, double x);

    double getLayoutX(@UnknownInitialization(javafx.scene.Node.class) Node this);
    double getLayoutY(@UnknownInitialization(javafx.scene.Node.class) Node this);
    double getWidth(@UnknownInitialization(javafx.scene.Node.class) Node this);
    double getHeight(@UnknownInitialization(javafx.scene.Node.class) Node this);
    double prefWidth(@UnknownInitialization(javafx.scene.Node.class) Node this, double height);
    double prefHeight(@UnknownInitialization(javafx.scene.Node.class) Node this, double width);

    void setFocusTraversable(@UnknownInitialization(javafx.scene.Node.class) Node this, boolean b);
    BooleanProperty focusedProperty(@UnknownInitialization(javafx.scene.Node.class) Node this);
    @Pure boolean isFocused(@UnknownInitialization(javafx.scene.Node.class) Node this);
    
    BooleanProperty hoverProperty(@UnknownInitialization(javafx.scene.Node.class) Node this);

    void setPickOnBounds(@UnknownInitialization(javafx.scene.Node.class) Node this, boolean b);
    Bounds getBoundsInLocal(@UnknownInitialization(javafx.scene.Node.class) Node this);
    Bounds getBoundsInParent(@UnknownInitialization(javafx.scene.Node.class) Node this);
    SimpleObjectProperty boundsInParentProperty(@UnknownInitialization(javafx.scene.Node.class) Node this);
    @Pure Point2D localToParent(@UnknownInitialization(javafx.scene.Node.class) Node this, Point2D p);
    @Pure Point2D localToScreen(@UnknownInitialization(javafx.scene.Node.class) Node this, Point2D p);
    @Pure Point2D localToScene(@UnknownInitialization(javafx.scene.Node.class) Node this, double x, double y);
    @Pure Bounds localToScreen(@UnknownInitialization(javafx.scene.Node.class) Node this, Bounds b);
    @Pure Point2D sceneToLocal(@UnknownInitialization(javafx.scene.Node.class) Node this, double x, double y);
    @Pure Point2D screenToLocal(@UnknownInitialization(javafx.scene.Node.class) Node this, double x, double y);
    @Pure Point2D screenToLocal(@UnknownInitialization(javafx.scene.Node.class) Node this, Point2D p);
    void setLayoutX(@UnknownInitialization(javafx.scene.Node.class) Node this, double x);
    void setLayoutY(@UnknownInitialization(javafx.scene.Node.class) Node this, double y);
    
    void getTranslateX(@UnknownInitialization(javafx.scene.Node.class) Node this);
    void getTranslateY(@UnknownInitialization(javafx.scene.Node.class) Node this);
    DoubleProperty translateXProperty(@UnknownInitialization(javafx.scene.Node.class) Node this);
    DoubleProperty translateYProperty(@UnknownInitialization(javafx.scene.Node.class) Node this);

    WritableImage snapshot(@UnknownInitialization(javafx.scene.Node.class) Node this, @Nullable SnapshotParameters params, @Nullable WritableImage image);
    
    void setAccessibleText(@UnknownInitialization(javafx.scene.Node.class) Node this, String value);
}
class Scene
{
    @Pure @Nullable Window getWindow();
    void setFill(@Nullable Paint paint);
    WritableImage snapshot(@Nullable WritableImage image);
}

package javafx.scene.control;
class DialogPane
{
    /* The initialisation is a slight lie.  This method is called from
       DialogPane's constructor, but after all other initialisation: */
    protected Node createButtonBar(@UnknownInitialization(javafx.scene.control.DialogPane.class) DialogPane this);
    public final ObservableList<ButtonType> getButtonTypes(@UnknownInitialization(javafx.scene.control.DialogPane.class) DialogPane this);
    protected Node createButton(@UnknownInitialization(javafx.scene.control.DialogPane.class) DialogPane this, ButtonType buttonType);
    public Node lookupButton(@UnknownInitialization(javafx.scene.control.DialogPane.class) DialogPane this, ButtonType buttonType);
}
class Dialog<R>
{
    void setResizable(@UnknownInitialization(javafx.scene.control.Dialog.class) Dialog<R> this, boolean b);
    void initStyle(@UnknownInitialization(javafx.scene.control.Dialog.class) Dialog<R> this, StageStyle s);
    void initModality(@UnknownInitialization(javafx.scene.control.Dialog.class) Dialog<R> this, Modality m);
    void initOwner(@UnknownInitialization(javafx.scene.control.Dialog.class) Dialog<R> this, Window w);
    DialogPane getDialogPane(@UnknownInitialization(javafx.scene.control.Dialog.class) Dialog<R> this);
    void setDialogPane(@UnknownInitialization(javafx.scene.control.Dialog.class) Dialog<R> this, DialogPane value);
    void setResultConverter(@UnknownInitialization(javafx.scene.control.Dialog.class) Dialog<R> this, Callback<ButtonType, @Nullable R> a);
    ObjectProperty<Callback<ButtonType, @Nullable R>> resultConverterProperty(@UnknownInitialization(javafx.scene.control.Dialog.class) Dialog<R> this);
    void setResult(@UnknownInitialization(javafx.scene.control.Dialog.class) Dialog<R> this, @Nullable R r);
    R getResult(@UnknownInitialization(javafx.scene.control.Dialog.class) Dialog<R> this);
    void setOnShown(@UnknownInitialization(javafx.scene.control.Dialog.class) Dialog<R> this, EventHandler<DialogEvent> e);
    void setOnHidden(@UnknownInitialization(javafx.scene.control.Dialog.class) Dialog<R> this, EventHandler<DialogEvent> e);
    void setOnShowing(@UnknownInitialization(javafx.scene.control.Dialog.class) Dialog<R> this, EventHandler<DialogEvent> e);
    void setOnHiding(@UnknownInitialization(javafx.scene.control.Dialog.class) Dialog<R> this, EventHandler<DialogEvent> e);
    void setTitle(@UnknownInitialization(javafx.scene.control.Dialog.class) Dialog<R> this, String s);
    void close(@UnknownInitialization(javafx.scene.control.Dialog.class) Dialog<R> this);
    
    ReadOnlyBooleanProperty showingProperty(@UnknownInitialization(javafx.scene.control.Dialog.class) Dialog<R> this);
    
    double getX(@UnknownInitialization(javafx.scene.control.Dialog.class) Dialog<R> this);
    double getY(@UnknownInitialization(javafx.scene.control.Dialog.class) Dialog<R> this);
    double getWidth(@UnknownInitialization(javafx.scene.control.Dialog.class) Dialog<R> this);
    double getHeight(@UnknownInitialization(javafx.scene.control.Dialog.class) Dialog<R> this);
    
    void setX(@UnknownInitialization(javafx.scene.control.Dialog.class) Dialog<R> this, double x);
    void setY(@UnknownInitialization(javafx.scene.control.Dialog.class) Dialog<R> this, double y);
    void setWidth(@UnknownInitialization(javafx.scene.control.Dialog.class) Dialog<R> this, double width);
    void setHeight(@UnknownInitialization(javafx.scene.control.Dialog.class) Dialog<R> this, double height);
}
class Labeled
{
    void setContentDisplay(@UnknownInitialization(javafx.scene.control.Labeled.class) Labeled this, ContentDisplay contentDisplay);
    void setText(@UnknownInitialization(javafx.scene.control.Labeled.class) Labeled this, String s);
    void setGraphic(@UnknownInitialization(javafx.scene.control.Labeled.class) Labeled this, Node graphic);
    void setAlignment(@UnknownInitialization(javafx.scene.control.Labeled.class) Labeled this, Pos value);
}
class Button
{
    void setOnAction(@UnknownInitialization(javafx.scene.control.Button.class) Button this, @NonNull EventHandler<ActionEvent> ev);
}
class Label
{
    
}
class ToggleButton
{
    ToggleButton(@Localized String text);
    ToggleButton(@Localized String text, Node graphic);
    BooleanProperty selectedProperty(@UnknownInitialization(javafx.scene.control.ToggleButton.class) ToggleButton this); 
}
class ScrollPane
{
    Property viewportBoundsProperty(@UnknownInitialization(javafx.scene.control.ScrollPane.class) ScrollPane this);
    Property contentProperty(@UnknownInitialization(javafx.scene.control.ScrollPane.class) ScrollPane this);
    Bounds getViewportBounds(@UnknownInitialization(javafx.scene.control.ScrollPane.class) ScrollPane this);
    Node getContent(@UnknownInitialization(javafx.scene.control.ScrollPane.class) ScrollPane this);
    void setContent(@UnknownInitialization(javafx.scene.control.ScrollPane.class) ScrollPane this, Node content);
    void setFitToWidth(@UnknownInitialization(javafx.scene.control.ScrollPane.class) ScrollPane this, boolean b);
    void setFitToHeight(@UnknownInitialization(javafx.scene.control.ScrollPane.class) ScrollPane this, boolean b);
}
@Interned class ButtonType
{

}
class ComboBox<T>
{
    ObjectProperty<@Nullable T> valueProperty();
}
class TableView<S>
{
    ObsverableList<S> getItems(@UnknownInitialization(javafx.scene.control.TableView.class) TableView<S> this);
    ObservableList<TableColumn<S,?>> getColumns(@UnknownInitialization(javafx.scene.control.TableView.class) TableView<S> this);
}
class ListView<T>
{
    void setCellFactory(@UnknownInitialization(javafx.scene.control.ListView.class) ListView<T> this, Callback factory);
    MultipleSelectionModel getSelectionModel(@UnknownInitialization(javafx.scene.control.ListView.class) ListView this);
    void setOnKeyPressed(@UnknownInitialization(javafx.scene.control.ListView.class) ListView this, EventHandler handler);
    List getItems(@UnknownInitialization(javafx.scene.control.ListView.class) ListView<T> this);
    void setEditable(@UnknownInitialization(javafx.scene.control.ListView.class) ListView<T> this, boolean b);
}
class SelectionModel<T>
{
    ReadOnlyObjectProperty<@Nullable T> selectedItemProperty();
    @Nullable T getSelectedItem();
}
class TableCell<S, T>
{
     void setGraphic(@Nullable Node a);
}
class ListCell<T>
{
     StringProperty textProperty(@UnknownInitialization(javafx.scene.control.ListCell.class) ListCell this);
     void updateItem(@Nullable T item, boolean empty);
}
class Cell<T>
{
     @Nullable T getItem(@UnknownInitialization(javafx.scene.control.Cell.class) Cell this);
     ReadOnlyBooleanProperty emptyProperty(@UnknownInitialization(javafx.scene.control.Cell.class) Cell this);
}
class IndexedCell<T>
{
     int getIndex(@UnknownInitialization(javafx.scene.control.IndexedCell.class) IndexedCell this);
}
class PopupControl
{
    ObservableList<String> getStyleClass(@UnknownInitialization(javafx.scene.control.PopupControl.class) PopupControl this);
    void setSkin(@UnknownInitialization(javafx.scene.control.PopupControl.class) PopupControl this, Skin<?> value);
    ObjectProperty<Skin<?>> skinProperty(@UnknownInitialization(javafx.scene.control.PopupControl.class) PopupControl this);
}
class Menu
{
    Menu(@NonNull String text, @Nullable Node graphic, @NonNull MenuItem... menuItems);
}
class MenuItem
{
    void setDisable(@UnknownInitialization(javafx.scene.control.MenuItem.class) MenuItem this, boolean b);
    void setOnMenuValidation(@UnknownInitialization(javafx.scene.control.MenuItem.class) MenuItem this,EventHandler e);
    <T extends Event> void addEventHandler(@UnknownInitialization(javafx.scene.control.MenuItem.class) MenuItem this,EventType t, EventHandler e);
    StringProperty textProperty(@UnknownInitialization(javafx.scene.control.MenuItem.class) MenuItem this);
    ReadOnlyObjectProperty parentMenuProperty(@UnknownInitialization(javafx.scene.control.MenuItem.class) MenuItem this);
}
class Tooltip
{
    public static void install(@UnknownInitialization(javafx.scene.Node.class) Node node, Tooltip t);
}
package javafx.scene.shape;
class Shape
{
    void setStroke(@Nullable Paint value);
}

package javafx.scene.effect;
class DropShadow
{
    void setInput(@Nullable Effect e);
}
class InnerShadow
{
    void setInput(@Nullable Effect e);
}
class Blend
{
    public Blend(BlendMode b, @Nullable Effect a, @Nullable Effect b);
}

package javafx.scene.input;
class Clipboard
{
    @Nullable Object getContent(DataFormat dataFormat);
}
class ContextMenuEvent
{
    ContextMenuEvent(EventType<ContextMenuEvent> eventType,
        double x, double y,
        double screenX, double screenY,
        boolean keyboardTrigger, @Nullable PickResult pickResult);
}

package javafx.scene.layout;
class BorderPane
{
    BorderPane(@Nullable Node a, @Nullable Node b, @Nullable Node c, @Nullable Node d, @Nullable Node e);
    void setCenter(@UnknownInitialization(javafx.scene.layout.BorderPane.class) BorderPane this, @Nullable Node a);
    void setRight(@UnknownInitialization(javafx.scene.layout.BorderPane.class) BorderPane this, @Nullable Node a);
    void setTop(@UnknownInitialization(javafx.scene.layout.BorderPane.class) BorderPane this, @Nullable Node a);
    void setBottom(@UnknownInitialization(javafx.scene.layout.BorderPane.class) BorderPane this, @Nullable Node a);
    void setLeft(@UnknownInitialization(javafx.scene.layout.BorderPane.class) BorderPane this, @Nullable Node a);
    //@UnknownInitialization ObservableList<String> getStyleClass();
}
class GridPane
{
    //ObservableList<String> getStyleClass(@UnknownInitialization(javafx.scene.layout.GridPane.class) GridPane this);
    public void add(@UnknownInitialization(javafx.scene.layout.GridPane.class) GridPane this, Node child, int columnIndex, int rowIndex);
}
class StackPane
{
    //@UnknownInitialization ObservableList<String> getStyleClass();
}
class VBox
{
    void setFillWidth(@UnknownInitialization(javafx.scene.layout.VBox.class) VBpx this, boolean on);
}
class Pane
{
    ObservableList<Node> getChildren(@UnknownInitialization(javafx.scene.layout.Pane.class) Pane this);
}
class Region
{
    ObservableList<Node> getChildren(@UnknownInitialization(javafx.scene.layout.Region.class) Region this);

    DoubleProperty minWidthProperty(@UnknownInitialization(javafx.scene.layout.Region.class) Region this);
    DoubleProperty prefWidthProperty(@UnknownInitialization(javafx.scene.layout.Region.class) Region this);
    DoubleProperty maxWidthProperty(@UnknownInitialization(javafx.scene.layout.Region.class) Region this);
    DoubleProperty widthProperty(@UnknownInitialization(javafx.scene.layout.Region.class) Region this);

    DoubleProperty minHeightProperty(@UnknownInitialization(javafx.scene.layout.Region.class) Region this);
    DoubleProperty prefHeightProperty(@UnknownInitialization(javafx.scene.layout.Region.class) Region this);
    DoubleProperty maxHeightProperty(@UnknownInitialization(javafx.scene.layout.Region.class) Region this);
    DoubleProperty heightProperty(@UnknownInitialization(javafx.scene.layout.Region.class) Region this);
    
    void setMinWidth(@UnknownInitialization(javafx.scene.layout.Region.class) Region this, double v);
    void setPrefWidth(@UnknownInitialization(javafx.scene.layout.Region.class) Region this, double v);
    void setMaxWidth(@UnknownInitialization(javafx.scene.layout.Region.class) Region this, double v);
    
    void setMinHeight(@UnknownInitialization(javafx.scene.layout.Region.class) Region this, double v);
    void setPrefHeight(@UnknownInitialization(javafx.scene.layout.Region.class) Region this, double v);
    void setMaxHeight(@UnknownInitialization(javafx.scene.layout.Region.class) Region this, double v);

    double getWidth(@UnknownInitialization(javafx.scene.layout.Region.class) Region this);
    double getHeight(@UnknownInitialization(javafx.scene.layout.Region.class) Region this);
    
    double prefWidth(@UnknownInitialization(javafx.scene.layout.Region.class) Region this, double height);
    double prefHeight(@UnknownInitialization(javafx.scene.layout.Region.class) Region this, double width);
}

package javafx.stage;
class Window
{
    boolean isShowing(@UnknownInitialization(javafx.stage.Window.class) Window this);
    void hide(@UnknownInitialization(javafx.stage.Window.class) Window this);
    void sizeToScene(@UnknownInitialization(javafx.stage.Window.class) Window this);
    
    void setOnHiding(@UnknownInitialization(javafx.stage.Window.class) Window this, EventHandler<WindowEvent> e);

    <T extends Event> void addEventFilter(@UnknownInitialization(javafx.stage.Window.class) Window this,
                final EventType<T> eventType,
                @UnknownInitialization final EventHandler<? super T> eventFilter);
}
class PopupWindow
{
    //@UnknownInitialization ObservableList<String> getStyleClass();
    void show(@UnknownInitialization(javafx.stage.PopupWindow.class) PopupWindow this, Node ownerNode, double anchorX, double anchorY);
    void setAnchorLocation(@UnknownInitialization(javafx.stage.PopupWindow.class) PopupWindow this, AnchorLocation value);
    void setAnchorX(@UnknownInitialization(javafx.stage.PopupWindow.class) PopupWindow this, final double value);
    void setAnchorY(@UnknownInitialization(javafx.stage.PopupWindow.class) PopupWindow this, final double value);
    void setAutoHide(@UnknownInitialization(javafx.stage.PopupWindow.class) PopupWindow this, boolean value);
    void setAutoFix(@UnknownInitialization(javafx.stage.PopupWindow.class) PopupWindow this, boolean value);
    void setHideOnEscape(@UnknownInitialization(javafx.stage.PopupWindow.class) PopupWindow this, boolean value);
    void hide(@UnknownInitialization(javafx.stage.PopupWindow.class) PopupWindow this);
}
class FileChooser
{
    @Nullable File showOpenDialog(@Nullable Window w);
    @Nullable List<@NonNull File> showOpenMultipleDialog(@Nullable Window w);
    @Nullable File showSaveDialog(@Nullable Window w);
}

package org.scenicview;
class ScenicView
{
    // Not actually true (will throw NPE) but we only this for debugging and don't want to do a null check:
    void show(@Nullable Scene target);
}
package org.controlsfx.control;
class SegmentedButton
{
    List getButtons(@UnknownInitialization(org.controlsfx.control.SegmentedButton.class) SegmentedButton this);
    ToggleGroup getToggleGroup(@UnknownInitialization(org.controlsfx.control.SegmentedButton.class) SegmentedButton this);
}
class PopOver
{
    void setDetachable(@UnknownInitialization(org.controlsfx.control.PopOver.class) PopOver this, boolean b);
    BooleanProperty detachedProperty(@UnknownInitialization(org.controlsfx.control.PopOver.class) PopOver this);
    void show(@UnknownInitialization(org.controlsfx.control.PopOver.class) PopOver this, @NonNull Node owner);
    void setArrowLocation(@UnknownInitialization(org.controlsfx.control.PopOver.class) PopOver this, ArrowLocation location);
    StackPane getRoot(@UnknownInitialization(org.controlsfx.control.PopOver.class) PopOver this);
    void setContentNode(@UnknownInitialization(org.controlsfx.control.PopOver.class) PopOver this, Node content);
    ReadOnlyObjectProperty<Scene> sceneProperty(@UnknownInitialization(org.controlsfx.control.PopOver.class) PopOver this);
}
package javafx.embed.swing;
class SwingFXUtils
{
    static BufferedImage fromFXImage(Image img, @Nullable BufferedImage bimg);
}
