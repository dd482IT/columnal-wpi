plugins {
    id 'application'
    id 'io.miret.etienne.sass' version '1.4.1'
}
apply plugin: 'java'

dependencies {
    implementation project(':utility')
    implementation project(':gui-utility')
    implementation project(':parsers')
    implementation project(':data')
    implementation project(':stf')
    implementation project(':expressions')
    implementation project(':functions')
    implementation project(':lex-editor')
    implementation project(':transformations')
    implementation project(':r-interop')
    implementation libs.guava
    implementation 'org.fxmisc.wellbehaved:wellbehavedfx:0.3'
    implementation 'com.google.code.findbugs:jsr305:3.0.2'
    implementation 'org.controlsfx:controlsfx:8.40.12'
    implementation 'org.apache.poi:poi-ooxml:4.1.2'
    implementation 'org.jsoup:jsoup:1.11.3'
    implementation libs.commons.io
    implementation libs.commons.lang3
    implementation libs.javaSMT
    implementation 'one.util:streamex:0.6.3'
    implementation 'net.java.dev.jna:jna:5.4.0'
    implementation 'net.java.dev.jna:jna-platform:5.4.0'
    implementation 'com.badlogicgames.packr:packr:3.0.3'
}

task copySCSS(type: Copy) {
    from "${projectDir}/src/main/scss"
    from "${projectDir}/src/main/scss/light"
    include "*.scss"
    into "${buildDir}/generated/sources/scss/light"
}

compileSass {
    dependsOn copySCSS
    outputDir = project.file("${buildDir}/resources/main")
    sourceDir = project.file("${buildDir}/generated/sources/scss/light")
    noErrorCss()
}

build.dependsOn(compileSass)
jar.dependsOn(compileSass)

task validateXmlHelp(type: XmlValidate) {
    xml fileTree(dir: 'src/main/help', include: '*.xml')
    xsd = file('src/main/help/help.xsd')
}

task validateXmlFuncdoc(type: XmlValidate) {
    xml fileTree(dir: 'src/main/funcdoc', include: '*.xml')
    xsd = file('src/main/funcdoc/funcdoc.xsd')
}

// This should probably be check really, but I don't want to wait for the CI:
build.dependsOn(validateXmlFuncdoc)
build.dependsOn(validateXmlHelp)



ext {
    javaMainClass = "records.gui.Main"
}
application {
    mainClassName = javaMainClass
}
description = 'app'
