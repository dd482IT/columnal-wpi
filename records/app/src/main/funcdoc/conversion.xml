<?xml version="1.0"?>
<functionDocumentation xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                       xsi:noNamespaceSchemaLocation="funcdoc.xsd"
                       namespace="conversion">
    <function name="from text">
        <typeArg>t</typeArg>
        <typeConstraint>Readable t</typeConstraint>        
        <argType>Text</argType>
        <returnType>@typevar t</returnType>
        <description>
            <p>Converts a value from text.</p>
            <p>This function works for any readable type (the only non-readable types are function types).  If the intended type cannot be inferred automatically, you may need to wrap this using the asType function.</p>
            <p>Some notes for specific types:</p>
            <ul>
                <li>For boolean values, lower-case and upper-case are allowed in the names.</li>
                <li>Dates are read using a variety of formats.  Be careful with the DD-MM-YY formats and similar as they are ambiguous against MM-DD-YY.  If this is an issue, use the date from string function to specify a format.</li>
                <li>Numbers must use dot as the decimal separator, commas are not supported.</li>
                <li>If you want to get a Text out of from text, it must be in quotes.</li>
            </ul>
        </description>
        <example>
            <input>@call @function from text("65") &gt; 64</input>
            <output>true</output>
        </example>
        <example>
            <input>@call @function from text("TRUE") | false</input>
            <output>true</output>
        </example>
        <example>
            <input>@call @function asType(type{Date}, @call @function from text("21 March 2004"))</input>
            <output>@call @function date(2004{year}, 3{month}, 21{day})</output>
        </example>
        <example>
            <input>@call @function asType(type{[(Boolean, Number{m})]}, @call @function from text("[(True, 0), (FALSE, -1.6)]"))</input>
            <output>[(true, 0{m}), (false, -1.6{m})]</output>
        </example>
    </function>

    <function name="typed from text">
        <typeArg>t</typeArg>
        <typeConstraint>Readable t</typeConstraint>
        <argType>(@tagged Type(@typevar t), Text)</argType>
        <returnType>@typevar t</returnType>
        <description>
            <p>Converts a value from text, specifying the target type.</p>
            <p>See <link function="from text"/> for more details.</p>
        </description>
        <example>
            <inputArg>(type{Date}, "21 March 2004")</inputArg>
            <output>@call @function date(2004{year}, 3{month}, 21{day})</output>
        </example>
        <example>
            <inputArg>(type{[(Boolean, Number{m})]}, "[(True, 0), (FALSE, -1.6)]")</inputArg>
            <output>[(true, 0{m}), (false, -1.6{m})]</output>
        </example>
    </function>
    
    
    <function name="to text">
        <typeArg>t</typeArg>
        <typeConstraint>Showable t</typeConstraint>
        <argType>@typevar t</argType>
        <returnType>Text</returnType>
        <description>
            <p>Converts a value to text.</p>
        </description>
        <equivalence>
            <foranytype name="t"><typeConstraint>Readable</typeConstraint><typeConstraint>Showable</typeConstraint><typeConstraint>Equatable</typeConstraint></foranytype>
            <forany name="x">@typevar t</forany>
            <lhs>@call @function from text(@call @function to text(x))</lhs>
            <rhs>x</rhs>
        </equivalence>
        <example>
            <inputArg>true</inputArg>
            <output>"true"</output>
        </example>
        <example>
            <inputArg>65{m}</inputArg>
            <output>"65"</output>
        </example>
        <!-- TODO add more examples -->
    </function>
</functionDocumentation>