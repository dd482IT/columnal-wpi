<?xml version="1.0" encoding="UTF-8" ?>
<functionDocumentation xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                       xsi:noNamespaceSchemaLocation="funcdoc.xsd"
                       namespace="">
    <syntax title="If Then Else" id="if">
        <typeArg>t</typeArg>
        <syntaxElements>
            <keyword>@if</keyword>
            <type name="condition">Boolean</type>
            <keyword>@then</keyword>
            <type name="value if true">t</type>
            <keyword>@else</keyword>
            <type name="value if false">t</type>
            <keyword>@endif</keyword>
        </syntaxElements>
        <description>
            <p>Chooses between two expressions depending on whether the condition is true or false.  For example, <code>@if score &gt;= 0 @then "Positive" @else "Negative" @endif</code> would check whether the score expression is greater than or equal to zero.  If it was, the result would be the "Positive" text; otherwise it would be the "Negative" text.</p>
        </description>
        <example>
            <input>@if 5 &gt;= 0 @then "Positive" @else "Negative" @endif</input>
            <output>"Positive"</output>
        </example>
        <example>
            <input>@if "A" = "B" @then 1 @else 0 @endif</input>
            <output>0</output>
        </example>
    </syntax>
    <syntax title="Match" id="match">
        <typeArg>c</typeArg>
        <typeArg>t</typeArg>
        <syntaxElements>
            <keyword>@match</keyword>
            <type name="expression">c</type>
            <keyword>@case</keyword>
            <type name="pattern">c</type>
            <keyword>@given</keyword>
            <type name="guard">Boolean</type>
            <keyword>@orcase</keyword>
            <type name="another pattern">c</type>
            <keyword>@given</keyword>
            <type name="another guard">Boolean</type>
            <keyword>@then</keyword>
            <type name="value if matches">t</type>
            <keyword>@endmatch</keyword>
        </syntaxElements>
        <description>
            <p>Matches against several possible alternatives.  For example, <code>@match desc @case "full" @orcase "max" @then 1.0 @case _ @then 0.5 @endmatch</code> checks if desc is equal to "full" or "max".  If so, the result is 1.0, otherwise (the case underscore matches anything else) the result is 0.5.</p>
        </description>
        <example>
            <input>@match "B" @case "A" @then true @case "B" @then false @endmatch</input>
            <output>false</output>
        </example>
        <example>
            <input>@match "Hello There" @case "Bye" @then "Leaving" @case "Hello" ; _ @then "Arriving" @endmatch</input>
            <output>"Arriving"</output>
        </example>
        <example>
            <input>@match 32 @case 0 @then "Zero" @case n @given n &gt; 0 @then "Positive" @endmatch</input>
            <output>"Positive"</output>
        </example>
    </syntax>
    <variable name="group count">
        <type>Number</type>
        <description>
            <p>A count of the number of items that collapsed into the destination row.  The aggregate expression can either be calculated once for the whole source table (in which case this variable is the length of the source table) or split by row values.</p>
            <p>For example, if you split by a boolean column Winning, there will be one aggregated row for all the rows in the source table where Winning was true -- and there, group count will be the number of rows in the source table where Winning was true.</p>
            <p>If you want a frequency table, using group count by itself will produce the right result.</p>
        </description>
    </variable>
    <variable name="row">
        <type>Number</type>
        <description>
            <p>The number of the current row.  The first row is 1, the second row is 2 and so on.</p>
        </description>
    </variable>
</functionDocumentation>
