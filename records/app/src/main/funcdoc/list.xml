<?xml version="1.0"?>
<functionDocumentation xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                       xsi:noNamespaceSchemaLocation="funcdoc.xsd"
                       namespace="list">
    <function name="list length">
        <synonym>size</synonym>
        
        <typeArg>t</typeArg>
        <argType name="list">[@typevar t]</argType>
        <returnType name="length">Number</returnType>
        <description>
            <p>Gets the number of elements in the given list.</p>
        </description>
        <example>
            <inputArg>["a", "word", "list"]</inputArg>
            <output>3</output>
        </example>
        <example>
            <inputArg>[2, 4, 6, 8]</inputArg>
            <output>4</output>
        </example>
        <example>
            <inputArg>[]</inputArg>
            <output>0</output>
        </example>
    </function>
    
    <function name="element">
        <synonym>get</synonym>
        
        <typeArg>t</typeArg>
        <argType name="list">[@typevar t]</argType>
        <argType name="position">Number</argType>
        <returnType name="list item">@typevar t</returnType>
        <description>
            <p>Gets the list element at the given position (first position is 1).</p>
        </description>
        <example>
            <inputArg>(["x", "y", "z"], 1)</inputArg>
            <output>"x"</output>
        </example>
        <example>
            <inputArg>([2, 4, 6, 8], 4)</inputArg>
            <output>8</output>
        </example>
        <example>
            <inputArg>([], 1)</inputArg>
            <output>error</output>
        </example>
        <example>
            <inputArg>([true, false], 0)</inputArg>
            <output>error</output>
        </example>
    </function>
    
    <function name="element or">
        <synonym>previous</synonym>
        <typeArg>t</typeArg>
        <argType name="list">[@typevar t]</argType>
        <argType name="position">Number</argType>
        <argType name="default">@typevar t</argType>
        <returnType name="list item">@typevar t</returnType>
        <description>
            <p>If the number is within the bounds of the list, gives back the element at that position (e.g. 3 gets the 3rd item in the list).  But if the number is 0 or less, or greater than the list size, the third parameter will be returned instead.</p>
            <p>This is particularly useful for accessing the previous row of a column and avoiding an error on the first element, for example <code>@call @function element or(@entire Totals, row - 1, 0)</code> in a Calculate will give the value from the Totals column in the previous row, or 0 if this is the first row of the table.</p>
        </description>
        <example>
            <inputArg>(["a", "b"], 0, "z")</inputArg>
            <output>"z"</output>
        </example>
        <example>
            <inputArg>([7, 8, 9], 3, 0)</inputArg>
            <output>9</output>
        </example>
        <example>
            <inputArg>([true, true, true], 5, false)</inputArg>
            <output>false</output>
        </example>
    </function>
    
    <function name="in list">
        <synonym>contains</synonym>
        
        <typeArg>t</typeArg>
        <typeConstraint>Comparable t</typeConstraint>
        <argType name="item">@typevar t</argType>
        <argType name="list">[@typevar t]</argType>
        <returnType name="is in list">Boolean</returnType>
        <description>
            <p>Checks if the item is in the list.</p>
        </description>
        <example>
            <inputArg>(2, [1, 2, 3])</inputArg>
            <output>true</output>
        </example>
        <example>
            <inputArg>("A", ["a", "b", "c"])</inputArg>
            <output>false</output>
        </example>
    </function>
    
    <function name="single">
        <typeArg>t</typeArg>
        <argType name="list">[@typevar t]</argType>
        <returnType name="single item">@typevar t</returnType>
        <description>
            <p>If this list has exactly one element, returns it.  Otherwise gives an error.</p>
            <p>This is useful if you have a table where you store single values.  The column is a list, so you need to use a function, like single, to fetch out the one item in it.</p>
        </description>
        <example>
            <inputArg>[65]</inputArg>
            <output>65</output>
        </example>
        <example>
            <inputArg>[]</inputArg>
            <output>error</output>
        </example>
        <example>
            <inputArg>[1, 2]</inputArg>
            <output>error</output>
        </example>
    </function>
    
    <function name="join lists">
        <synonym>concatenate</synonym>
        
        <typeArg>t</typeArg>
        <argType name="list of lists">[[@typevar t]]</argType>
        <returnType name="joined lists">[@typevar t]</returnType>
        <description>
            <p>Takes a list of lists, and joins them into one list by joining them end-to-end.</p>
            <p>Each item in the passed list must be a list.  To include single items, wrap them in square brackets [].</p>
        </description>
        <example>
            <inputArg>[[0, 1], [3, 4], [7]]</inputArg>
            <output>[0, 1, 3, 4, 7]</output>
        </example>
        <example>
            <inputArg>[[true], [], [false]]</inputArg>
            <output>[true, false]</output>
        </example>
        <example>
            <inputArg>[]</inputArg>
            <output>[]</output>
        </example>
    </function>
</functionDocumentation>
